//ExtentManager.cs file will be in core project(base class)
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;

public class ExtentManager
{
    public static ExtentReports extent;
    public static ExtentTest test;

    public static void StartReport()
    {
        var htmlReporter = new ExtentHtmlReporter("ExtentReport.html");
        extent = new ExtentReports();
        extent.AttachReporter(htmlReporter);
    }

    public static void FlushReport()
    {
        extent.Flush();
    }
}


using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.IO;

public class BaseTest
{
    public IWebDriver driver;

    [OneTimeSetUp]
    public void GlobalSetup()
    {
        ExtentManager.StartReport(); // Start Extent Report
    }

    [SetUp]
    public void TestSetup()
    {
        driver = new ChromeDriver();
        ExtentManager.test = ExtentManager.extent.CreateTest(TestContext.CurrentContext.Test.Name);
    }

    [TearDown]
    public void TestCleanup()
    {
        var status = TestContext.CurrentContext.Result.Outcome.Status;

        if (status == NUnit.Framework.Interfaces.TestStatus.Failed)
        {
            string screenshotPath = CaptureScreenshot(TestContext.CurrentContext.Test.Name);
            ExtentManager.test.Fail("Test Failed")
                .AddScreenCaptureFromPath(screenshotPath);
        }
        else
        {
            ExtentManager.test.Pass("Test Passed");
        }

        driver.Quit();
    }

    [OneTimeTearDown]
    public void GlobalTeardown()
    {
        ExtentManager.FlushReport(); // Finalize report
    }

    public string CaptureScreenshot(string testName)
    {
        string screenshotDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Screenshots");
        Directory.CreateDirectory(screenshotDir);
        string filePath = Path.Combine(screenshotDir, testName + ".png");

        Screenshot ss = ((ITakesScreenshot)driver).GetScreenshot();
        ss.SaveAsFile(filePath, ScreenshotImageFormat.Png);

        return filePath;
    }
}


//Sample test in unit project
using NUnit.Framework;

public class SampleTest : BaseTest
{
    [Test]
    public void GoogleTest()
    {
        driver.Navigate().GoToUrl("https://www.google.com");
        Assert.IsTrue(driver.Title.Contains("Google")); // Pass
    }

    [Test]
    public void FailingTest()
    {
        driver.Navigate().GoToUrl("https://www.google.com");
        Assert.IsTrue(driver.Title.Contains("Bing")); // Fail intentionally
    }
}



//Screenshot explaination
Step-by-step Explanation:
public string CaptureScreenshot(string testName)
This is a method that takes testName as a parameter.

It returns a string (which will be the path of the saved screenshot file).

You can call this method and pass the test name like:
CaptureScreenshot("LoginTest")

string screenshotDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Screenshots");
This creates a path to a folder named Screenshots.

AppDomain.CurrentDomain.BaseDirectory is the root directory of your running test project (bin\Debug or bin\Release).

Path.Combine(...) safely combines the base path and folder name to avoid path errors.

üìù Example result:
C:\YourProject\bin\Debug\net6.0\Screenshots

Directory.CreateDirectory(screenshotDir);
This creates the Screenshots folder if it doesn't already exist.

It‚Äôs safe ‚Äî it won't throw an error if the folder already exists.

string filePath = Path.Combine(screenshotDir, testName + ".png");
This builds the full file path where the screenshot will be saved.

testName + ".png" means your screenshot will be named like LoginTest.png.

üìù Example result:
C:\YourProject\bin\Debug\net6.0\Screenshots\LoginTest.png

Screenshot ss = ((ITakesScreenshot)driver).GetScreenshot();
This line takes the screenshot of the current browser window.

driver is your Selenium WebDriver.

(ITakesScreenshot)driver casts the WebDriver into a type that supports screenshots.

.GetScreenshot() captures the screenshot and stores it in the ss object.

ss.SaveAsFile(filePath, ScreenshotImageFormat.Png);
This saves the captured screenshot as a PNG file to the path we created earlier.

It writes the file physically into your project‚Äôs Screenshots folder.

return filePath;
Returns the full file path of the screenshot.

You can use this path for logging, report attachment, etc.

‚úÖ Example Use:
csharp
Copy
Edit
string screenshotPath = CaptureScreenshot("HomePageTest");
Console.WriteLine("Screenshot saved at: " + screenshotPath);
‚úÖ Output:
Screenshot will be saved at:

mathematica
Copy
Edit
C:\YourProject\bin\Debug\net6.0\Screenshots\HomePageTest.png


using System;

// Interface ‚Äî camera feature (fully abstract)
interface ICamera
{
    void TakePhoto();
}

// Abstract class ‚Äî common mobile features
abstract class Mobile
{
    public void MakeCall()
    {
        Console.WriteLine("Making a call...");
    }

    public abstract void ModelName();  // Abstract method
}

// Concrete class ‚Äî Samsung phone
class Samsung : Mobile, ICamera
{
    public override void ModelName()
    {
        Console.WriteLine("Model: Samsung Galaxy A15");
    }

    public void TakePhoto()
    {
        Console.WriteLine("Photo taken using Samsung camera.");
    }
}

// Main program
class Program
{
    static void Main()
    {
        Samsung myPhone = new Samsung();

        myPhone.MakeCall();       // from abstract class
        myPhone.ModelName();      // abstract method overridden
        myPhone.TakePhoto();      // from interface
    }
}

        public Dictionary<string, string> ReadPostingsTestData(string JsonSection)
        {
            var json = File.ReadAllText(this.TestDataFilePath("PostingsTestData.json"));
            JObject jsonObj = JObject.Parse(json);
            Dictionary<string, string> TestData = jsonObj[JsonSection].ToObject<Dictionary<string, string>>();
            return TestData;
        }

1st read which file do you want from the filepath and then read all the values from it
2nd Parse thar json to jsonobject
3rd convert which jsonobject to an dictionary

Git Commands Cheat Sheet for Interviews

Git Command	Description	When/Why It's Used

git init	Initializes a new Git repository	To start versioning a project
git clone <url>	Clones a remote repo to local	To download an existing project
git status	Shows file status	To see tracked/untracked/staged files
git add <file>	Adds file to staging area	To stage files before commit
git add .	Stages all changed files	Quickly stage all changes
git commit -m "msg"	Saves snapshot of staged files	To record project changes
git push	Uploads local commits to remote	To share work with team
git pull	Fetches + merges changes from remote	To update your local branch
git fetch	Gets latest changes from remote (no merge)	To preview changes before merging
git branch	Lists all local branches	To view existing branches
git branch <name>	Creates new branch	To work on a feature separately
git checkout <name>	Switches to given branch	To move between branches
git checkout -b <name>	Creates and switches to new branch	One-line shortcut
git merge <branch>	Merges target branch into current	To integrate changes
git log	Shows commit history	To audit previous work
git diff	Shows changes not yet staged	For code comparison
git reset <file>	Unstages file	To cancel staging
git reset --hard	Resets working directory and commits	To discard all changes (dangerous)
git revert <hash>	Reverts a specific commit safely	To undo a commit without breaking history
git stash	Temporarily saves changes	When switching tasks without committing
git stash pop	Applies stashed changes	To resume stashed work
.gitignore	File that ignores patterns	Avoids committing temp/log/config files

Modifier	Accessible Where?

private	Only inside the same class
protected	Inside same class + derived classes only
internal	Anywhere in the same project/assembly
public	Anywhere (project or outside)
