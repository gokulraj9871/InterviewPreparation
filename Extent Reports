//ExtentManager.cs file will be in core project(base class)
using AventStack.ExtentReports;
using AventStack.ExtentReports.Reporter;

public class ExtentManager
{
    public static ExtentReports extent;
    public static ExtentTest test;

    public static void StartReport()
    {
        var htmlReporter = new ExtentHtmlReporter("ExtentReport.html");
        extent = new ExtentReports();
        extent.AttachReporter(htmlReporter);
    }

    public static void FlushReport()
    {
        extent.Flush();
    }
}


using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System;
using System.IO;

public class BaseTest
{
    public IWebDriver driver;

    [OneTimeSetUp]
    public void GlobalSetup()
    {
        ExtentManager.StartReport(); // Start Extent Report
    }

    [SetUp]
    public void TestSetup()
    {
        driver = new ChromeDriver();
        ExtentManager.test = ExtentManager.extent.CreateTest(TestContext.CurrentContext.Test.Name);
    }

    [TearDown]
    public void TestCleanup()
    {
        var status = TestContext.CurrentContext.Result.Outcome.Status;

        if (status == NUnit.Framework.Interfaces.TestStatus.Failed)
        {
            string screenshotPath = CaptureScreenshot(TestContext.CurrentContext.Test.Name);
            ExtentManager.test.Fail("Test Failed")
                .AddScreenCaptureFromPath(screenshotPath);
        }
        else
        {
            ExtentManager.test.Pass("Test Passed");
        }

        driver.Quit();
    }

    [OneTimeTearDown]
    public void GlobalTeardown()
    {
        ExtentManager.FlushReport(); // Finalize report
    }

    public string CaptureScreenshot(string testName)
    {
        string screenshotDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Screenshots");
        Directory.CreateDirectory(screenshotDir);
        string filePath = Path.Combine(screenshotDir, testName + ".png");

        Screenshot ss = ((ITakesScreenshot)driver).GetScreenshot();
        ss.SaveAsFile(filePath, ScreenshotImageFormat.Png);

        return filePath;
    }
}


//Sample test in unit project
using NUnit.Framework;

public class SampleTest : BaseTest
{
    [Test]
    public void GoogleTest()
    {
        driver.Navigate().GoToUrl("https://www.google.com");
        Assert.IsTrue(driver.Title.Contains("Google")); // Pass
    }

    [Test]
    public void FailingTest()
    {
        driver.Navigate().GoToUrl("https://www.google.com");
        Assert.IsTrue(driver.Title.Contains("Bing")); // Fail intentionally
    }
}



//Screenshot explaination
Step-by-step Explanation:
public string CaptureScreenshot(string testName)
This is a method that takes testName as a parameter.

It returns a string (which will be the path of the saved screenshot file).

You can call this method and pass the test name like:
CaptureScreenshot("LoginTest")

string screenshotDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Screenshots");
This creates a path to a folder named Screenshots.

AppDomain.CurrentDomain.BaseDirectory is the root directory of your running test project (bin\Debug or bin\Release).

Path.Combine(...) safely combines the base path and folder name to avoid path errors.

üìù Example result:
C:\YourProject\bin\Debug\net6.0\Screenshots

Directory.CreateDirectory(screenshotDir);
This creates the Screenshots folder if it doesn't already exist.

It‚Äôs safe ‚Äî it won't throw an error if the folder already exists.

string filePath = Path.Combine(screenshotDir, testName + ".png");
This builds the full file path where the screenshot will be saved.

testName + ".png" means your screenshot will be named like LoginTest.png.

üìù Example result:
C:\YourProject\bin\Debug\net6.0\Screenshots\LoginTest.png

Screenshot ss = ((ITakesScreenshot)driver).GetScreenshot();
This line takes the screenshot of the current browser window.

driver is your Selenium WebDriver.

(ITakesScreenshot)driver casts the WebDriver into a type that supports screenshots.

.GetScreenshot() captures the screenshot and stores it in the ss object.

ss.SaveAsFile(filePath, ScreenshotImageFormat.Png);
This saves the captured screenshot as a PNG file to the path we created earlier.

It writes the file physically into your project‚Äôs Screenshots folder.

return filePath;
Returns the full file path of the screenshot.

You can use this path for logging, report attachment, etc.

‚úÖ Example Use:
csharp
Copy
Edit
string screenshotPath = CaptureScreenshot("HomePageTest");
Console.WriteLine("Screenshot saved at: " + screenshotPath);
‚úÖ Output:
Screenshot will be saved at:

mathematica
Copy
Edit
C:\YourProject\bin\Debug\net6.0\Screenshots\HomePageTest.png


using System;

// Interface ‚Äî camera feature (fully abstract)
interface ICamera
{
    void TakePhoto();
}

// Abstract class ‚Äî common mobile features
abstract class Mobile
{
    public void MakeCall()
    {
        Console.WriteLine("Making a call...");
    }

    public abstract void ModelName();  // Abstract method
}

// Concrete class ‚Äî Samsung phone
class Samsung : Mobile, ICamera
{
    public override void ModelName()
    {
        Console.WriteLine("Model: Samsung Galaxy A15");
    }

    public void TakePhoto()
    {
        Console.WriteLine("Photo taken using Samsung camera.");
    }
}

// Main program
class Program
{
    static void Main()
    {
        Samsung myPhone = new Samsung();

        myPhone.MakeCall();       // from abstract class
        myPhone.ModelName();      // abstract method overridden
        myPhone.TakePhoto();      // from interface
    }
}

        public Dictionary<string, string> ReadPostingsTestData(string JsonSection)
        {
            var json = File.ReadAllText(this.TestDataFilePath("PostingsTestData.json"));
            JObject jsonObj = JObject.Parse(json);
            Dictionary<string, string> TestData = jsonObj[JsonSection].ToObject<Dictionary<string, string>>();
            return TestData;
        }

1st read which file do you want from the filepath and then read all the values from it
2nd Parse thar json to jsonobject
3rd convert which jsonobject to an dictionary

Git Commands Cheat Sheet for Interviews

Git Command	Description	When/Why It's Used

Git Command	Usage (Simple Explanation)
git init	Starts a new local Git repository
git clone <url>	Copies a remote repo to your local system
git status	Shows the current state of your working directory (changes, staged files, etc.)
git add <file>	Adds specific file(s) to the staging area (ready for commit)
git add .	Adds all changes in the directory to staging
git commit -m "message"	Saves/stores your staged changes with a message
git log	Shows the history of commits
git diff	Shows the difference between files (what is changed)
git branch	Lists all branches in the repo
git branch <name>	Creates a new branch
git checkout <branch>	Switches to the specified branch
git checkout -b <name>	Creates and switches to a new branch in one step
git merge <branch>	Merges another branch into your current branch
git pull	Fetches latest changes from remote and merges
git push	Uploads local commits to remote (e.g., GitHub)
git remote -v	Shows remote repository URL(s)
git reset --hard	Resets all changes (dangerous, use with care)
git stash	Temporarily saves changes that are not ready to commit
git stash pop	Restores the stashed changes
git rm <file>	Removes a file from both the Git repo and your working folder
git rebase <branch>	Re-applies commits on top of another base branch (advanced use)

Modifier	Accessible Where?

private	Only inside the same class
protected	Inside same class + derived classes only
internal	Anywhere in the same project/assembly
public	Anywhere (project or outside)
